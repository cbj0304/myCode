!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ChartObserver	Observer.h	/^}ChartObserver, *ChartObserverPtr;$/;"	t	typeref:struct:__anon3
ChartObserverPtr	Observer.h	/^}ChartObserver, *ChartObserverPtr;$/;"	t	typeref:struct:__anon3
HLIST_HEAD	List.h	565;"	d
HLIST_HEAD_INIT	List.h	564;"	d
INIT_HLIST_HEAD	List.h	566;"	d
INIT_HLIST_NODE	List.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	List.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
LANJIAN_LIST_H_	List.h	9;"	d
LIST_HEAD	List.h	61;"	d
LIST_HEAD_INIT	List.h	59;"	d
LIST_POISON1	List.h	41;"	d
LIST_POISON2	List.h	42;"	d
Observer	Observer.h	/^}Observer, *ObserverPtr;$/;"	t	typeref:struct:__anon1
ObserverPtr	Observer.h	/^}Observer, *ObserverPtr;$/;"	t	typeref:struct:__anon1
Observer_Init	Observer.c	/^void Observer_Init(ObserverPtr op, update_fun_ptr fptr)$/;"	f
SRC_OBSERVER_H_	Observer.h	9;"	d
SRC_SUBJECT_H_	Subject.h	9;"	d
ScaleObserver	Observer.h	/^}ScaleObserver, *ScaleObserverPtr;$/;"	t	typeref:struct:__anon4
ScaleObserverPtr	Observer.h	/^}ScaleObserver, *ScaleObserverPtr;$/;"	t	typeref:struct:__anon4
SheetObserver	Observer.h	/^}SheetObserver, *SheetObserverPtr;$/;"	t	typeref:struct:__anon2
SheetObserverPtr	Observer.h	/^}SheetObserver, *SheetObserverPtr;$/;"	t	typeref:struct:__anon2
Subject	Subject.h	/^typedef struct _Subject Subject;$/;"	t	typeref:struct:_Subject
SubjectPtr	Subject.h	/^typedef struct _Subject* SubjectPtr;$/;"	t	typeref:struct:_Subject
Subject_AddObserver	Subject.c	/^static void Subject_AddObserver(SubjectPtr sp, ObserverPtr op)$/;"	f	file:
Subject_ChangeEvent	Subject.c	/^static void Subject_ChangeEvent(SubjectPtr sp, int code)$/;"	f	file:
Subject_Init	Subject.c	/^void Subject_Init(SubjectPtr sp)$/;"	f
Subject_NotifyObserver	Subject.c	/^static void Subject_NotifyObserver(SubjectPtr sp)$/;"	f	file:
Subject_RemoveObserver	Subject.c	/^static void Subject_RemoveObserver(SubjectPtr sp, ObserverPtr op)$/;"	f	file:
_Subject	Subject.h	/^struct _Subject$/;"	s
__hlist_del	List.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	List.h	/^static inline void __list_add(struct list_head *new, struct list_head *prev, struct list_head *next)$/;"	f
__list_cut_position	List.h	/^static inline void __list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)$/;"	f
__list_del	List.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_for_each	List.h	381;"	d
__list_splice	List.h	/^static inline void __list_splice(const struct list_head *list, struct list_head *prev, struct list_head *next)$/;"	f
add	Subject.h	/^	void (*add)(SubjectPtr sp, ObserverPtr op);$/;"	m	struct:_Subject
changeEvent	Subject.h	/^	void (*changeEvent)(SubjectPtr sp, int code);$/;"	m	struct:_Subject
container_of	List.h	24;"	d
first	List.h	/^    struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
hlist_add_after	List.h	/^static inline void hlist_add_after(struct hlist_node *n, struct hlist_node *next)$/;"	f
hlist_add_before	List.h	/^static inline void hlist_add_before(struct hlist_node *n, struct hlist_node *next)$/;"	f
hlist_add_head	List.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	List.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	List.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	List.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	List.h	649;"	d
hlist_for_each	List.h	651;"	d
hlist_for_each_entry	List.h	666;"	d
hlist_for_each_entry_continue	List.h	678;"	d
hlist_for_each_entry_from	List.h	690;"	d
hlist_for_each_entry_safe	List.h	703;"	d
hlist_for_each_safe	List.h	655;"	d
hlist_head	List.h	/^struct hlist_head$/;"	s
hlist_move_list	List.h	/^static inline void hlist_move_list(struct hlist_head *old, struct hlist_head *new)$/;"	f
hlist_node	List.h	/^struct hlist_node$/;"	s
hlist_unhashed	List.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
list	Subject.h	/^	struct list_head list;$/;"	m	struct:_Subject	typeref:struct:_Subject::list_head
list_add	List.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	List.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	List.h	/^static inline void list_cut_position(struct list_head *list, struct list_head *head, struct list_head *entry)$/;"	f
list_del	List.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	List.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	List.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	List.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	List.h	348;"	d
list_first_entry	List.h	359;"	d
list_for_each	List.h	367;"	d
list_for_each_entry	List.h	420;"	d
list_for_each_entry_continue	List.h	456;"	d
list_for_each_entry_continue_reverse	List.h	470;"	d
list_for_each_entry_from	List.h	483;"	d
list_for_each_entry_reverse	List.h	431;"	d
list_for_each_entry_safe	List.h	494;"	d
list_for_each_entry_safe_continue	List.h	510;"	d
list_for_each_entry_safe_from	List.h	526;"	d
list_for_each_entry_safe_reverse	List.h	541;"	d
list_for_each_prev	List.h	389;"	d
list_for_each_prev_safe	List.h	409;"	d
list_for_each_safe	List.h	399;"	d
list_head	List.h	/^struct list_head$/;"	s
list_is_last	List.h	/^static inline int list_is_last(const struct list_head *list, const struct list_head *head)$/;"	f
list_is_singular	List.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_move	List.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	List.h	/^static inline void list_move_tail(struct list_head *list, struct list_head *head)$/;"	f
list_prepare_entry	List.h	444;"	d
list_replace	List.h	/^static inline void list_replace(struct list_head *old, struct list_head *new)$/;"	f
list_replace_init	List.h	/^static inline void list_replace_init(struct list_head *old, struct list_head *new)$/;"	f
list_splice	List.h	/^static inline void list_splice(const struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	List.h	/^static inline void list_splice_init(struct list_head *list, struct list_head *head)$/;"	f
list_splice_tail	List.h	/^static inline void list_splice_tail(struct list_head *list, struct list_head *head)$/;"	f
list_splice_tail_init	List.h	/^static inline void list_splice_tail_init(struct list_head *list, struct list_head *head)$/;"	f
main	main.c	/^int main()$/;"	f
next	List.h	/^    struct hlist_node *next, * *pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	List.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
node	Observer.h	/^	struct list_head node;$/;"	m	struct:__anon1	typeref:struct:__anon1::list_head
notify	Subject.h	/^	void (*notify)(SubjectPtr sp);$/;"	m	struct:_Subject
obs	Observer.h	/^	Observer obs;$/;"	m	struct:__anon2
obs	Observer.h	/^    Observer obs;$/;"	m	struct:__anon3
obs	Observer.h	/^    Observer obs;$/;"	m	struct:__anon4
offsetof	List.h	29;"	d
offsetof	List.h	31;"	d
offsetof	List.h	33;"	d
pprev	List.h	/^    struct hlist_node *next, * *pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prefetch	List.h	13;"	d
prev	List.h	/^    struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
remove	Subject.h	/^	void (*remove)(SubjectPtr sp, ObserverPtr op);$/;"	m	struct:_Subject
update	Observer.h	/^	update_fun_ptr update;$/;"	m	struct:__anon1
update_chart	Observer.c	/^void update_chart(int val)$/;"	f
update_fun_ptr	Observer.h	/^typedef void(*update_fun_ptr)(int val);$/;"	t
update_scale	Observer.c	/^void update_scale(int val)$/;"	f
update_sheet	Observer.c	/^void update_sheet(int val)$/;"	f
val	Subject.h	/^	int val;$/;"	m	struct:_Subject
